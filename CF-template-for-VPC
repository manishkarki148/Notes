AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with Public and Private Subnets'

Parameters:
  VpcName:
    Description: Name of the VPC
    Type: String
    
  VpcCIDR:
    Description: CIDR block for VPC
    Type: String
    Default: 10.0.0.0/16
    
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24
    
  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24
    
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.3.0/24
    
  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.4.0/24
    
  PublicSubnet1Name:
    Description: Name of Public Subnet 1
    Type: String
    
  PublicSubnet2Name:
    Description: Name of Public Subnet 2
    Type: String
    
  PrivateSubnet1Name:
    Description: Name of Private Subnet 1
    Type: String
    
  PrivateSubnet2Name:
    Description: Name of Private Subnet 2
    Type: String
    
  CreateIGW:
    Description: Do you want to create an Internet Gateway?
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'
    
  CreateNATGateway:
    Description: Do you want to create a NAT Gateway?
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'

Conditions:
  ShouldCreateIGW: !Equals [!Ref CreateIGW, 'yes']
  ShouldCreateNAT: !Equals [!Ref CreateNATGateway, 'yes']

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: ap-southeast-2a
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet1Name

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: ap-southeast-2b
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet2Name

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: ap-southeast-2a
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet1Name

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: ap-southeast-2b
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet2Name

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: ShouldCreateIGW
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: ShouldCreateIGW
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: ShouldCreateIGW
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: ShouldCreateNAT
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: ShouldCreateNAT
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-NAT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-Private-RT

  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: ShouldCreateNAT
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    
  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    
  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
